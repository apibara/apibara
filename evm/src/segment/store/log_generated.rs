// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
pub enum LogOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Log<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Log<'a> {
    type Inner = Log<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> Log<'a> {
    pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
    pub const VT_TOPICS: flatbuffers::VOffsetT = 6;
    pub const VT_DATA: flatbuffers::VOffsetT = 8;
    pub const VT_LOG_INDEX: flatbuffers::VOffsetT = 10;
    pub const VT_TRANSACTION_INDEX: flatbuffers::VOffsetT = 12;
    pub const VT_TRANSACTION_HASH: flatbuffers::VOffsetT = 14;

    pub const fn get_fully_qualified_name() -> &'static str {
        "Log"
    }

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Log { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args LogArgs<'args>,
    ) -> flatbuffers::WIPOffset<Log<'bldr>> {
        let mut builder = LogBuilder::new(_fbb);
        builder.add_transaction_index(args.transaction_index);
        builder.add_log_index(args.log_index);
        if let Some(x) = args.transaction_hash {
            builder.add_transaction_hash(x);
        }
        if let Some(x) = args.data {
            builder.add_data(x);
        }
        if let Some(x) = args.topics {
            builder.add_topics(x);
        }
        if let Some(x) = args.address {
            builder.add_address(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn address(&self) -> Option<&'a Address> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<Address>(Log::VT_ADDRESS, None) }
    }
    #[inline]
    pub fn topics(&self) -> Option<flatbuffers::Vector<'a, B256>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, B256>>>(
                    Log::VT_TOPICS,
                    None,
                )
        }
    }
    #[inline]
    pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Log::VT_DATA,
                    None,
                )
        }
    }
    #[inline]
    pub fn log_index(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(Log::VT_LOG_INDEX, Some(0)).unwrap() }
    }
    #[inline]
    pub fn transaction_index(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(Log::VT_TRANSACTION_INDEX, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn transaction_hash(&self) -> Option<&'a B256> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<B256>(Log::VT_TRANSACTION_HASH, None) }
    }
}

impl flatbuffers::Verifiable for Log<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<Address>("address", Self::VT_ADDRESS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, B256>>>(
                "topics",
                Self::VT_TOPICS,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "data",
                Self::VT_DATA,
                false,
            )?
            .visit_field::<u64>("log_index", Self::VT_LOG_INDEX, false)?
            .visit_field::<u64>("transaction_index", Self::VT_TRANSACTION_INDEX, false)?
            .visit_field::<B256>("transaction_hash", Self::VT_TRANSACTION_HASH, false)?
            .finish();
        Ok(())
    }
}
pub struct LogArgs<'a> {
    pub address: Option<&'a Address>,
    pub topics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, B256>>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub log_index: u64,
    pub transaction_index: u64,
    pub transaction_hash: Option<&'a B256>,
}
impl<'a> Default for LogArgs<'a> {
    #[inline]
    fn default() -> Self {
        LogArgs {
            address: None,
            topics: None,
            data: None,
            log_index: 0,
            transaction_index: 0,
            transaction_hash: None,
        }
    }
}

pub struct LogBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LogBuilder<'a, 'b> {
    #[inline]
    pub fn add_address(&mut self, address: &Address) {
        self.fbb_
            .push_slot_always::<&Address>(Log::VT_ADDRESS, address);
    }
    #[inline]
    pub fn add_topics(&mut self, topics: flatbuffers::WIPOffset<flatbuffers::Vector<'b, B256>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_TOPICS, topics);
    }
    #[inline]
    pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Log::VT_DATA, data);
    }
    #[inline]
    pub fn add_log_index(&mut self, log_index: u64) {
        self.fbb_.push_slot::<u64>(Log::VT_LOG_INDEX, log_index, 0);
    }
    #[inline]
    pub fn add_transaction_index(&mut self, transaction_index: u64) {
        self.fbb_
            .push_slot::<u64>(Log::VT_TRANSACTION_INDEX, transaction_index, 0);
    }
    #[inline]
    pub fn add_transaction_hash(&mut self, transaction_hash: &B256) {
        self.fbb_
            .push_slot_always::<&B256>(Log::VT_TRANSACTION_HASH, transaction_hash);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LogBuilder<'a, 'b> {
        let start = _fbb.start_table();
        LogBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Log<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for Log<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("Log");
        ds.field("address", &self.address());
        ds.field("topics", &self.topics());
        ds.field("data", &self.data());
        ds.field("log_index", &self.log_index());
        ds.field("transaction_index", &self.transaction_index());
        ds.field("transaction_hash", &self.transaction_hash());
        ds.finish()
    }
}
