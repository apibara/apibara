// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AccessListItemOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccessListItem<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccessListItem<'a> {
  type Inner = AccessListItem<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccessListItem<'a> {
  pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_STORAGE_KEYS: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "AccessListItem"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccessListItem { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AccessListItemArgs<'args>
  ) -> flatbuffers::WIPOffset<AccessListItem<'bldr>> {
    let mut builder = AccessListItemBuilder::new(_fbb);
    if let Some(x) = args.storage_keys { builder.add_storage_keys(x); }
    if let Some(x) = args.address { builder.add_address(x); }
    builder.finish()
  }


  #[inline]
  pub fn address(&self) -> Option<&'a Address> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Address>(AccessListItem::VT_ADDRESS, None)}
  }
  #[inline]
  pub fn storage_keys(&self) -> Option<flatbuffers::Vector<'a, B256>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, B256>>>(AccessListItem::VT_STORAGE_KEYS, None)}
  }
}

impl flatbuffers::Verifiable for AccessListItem<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Address>("address", Self::VT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, B256>>>("storage_keys", Self::VT_STORAGE_KEYS, false)?
     .finish();
    Ok(())
  }
}
pub struct AccessListItemArgs<'a> {
    pub address: Option<&'a Address>,
    pub storage_keys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, B256>>>,
}
impl<'a> Default for AccessListItemArgs<'a> {
  #[inline]
  fn default() -> Self {
    AccessListItemArgs {
      address: None,
      storage_keys: None,
    }
  }
}

pub struct AccessListItemBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AccessListItemBuilder<'a, 'b> {
  #[inline]
  pub fn add_address(&mut self, address: &Address) {
    self.fbb_.push_slot_always::<&Address>(AccessListItem::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_storage_keys(&mut self, storage_keys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , B256>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessListItem::VT_STORAGE_KEYS, storage_keys);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AccessListItemBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AccessListItemBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccessListItem<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccessListItem<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccessListItem");
      ds.field("address", &self.address());
      ds.field("storage_keys", &self.storage_keys());
      ds.finish()
  }
}
