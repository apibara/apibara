// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
// struct Address, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Address(pub [u8; 20]);
impl Default for Address {
    fn default() -> Self {
        Self([0; 20])
    }
}
impl core::fmt::Debug for Address {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Address")
            .field("value", &self.value())
            .finish()
    }
}

impl flatbuffers::SimpleToVerifyInSlice for Address {}
impl<'a> flatbuffers::Follow<'a> for Address {
    type Inner = &'a Address;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        <&'a Address>::follow(buf, loc)
    }
}
impl<'a> flatbuffers::Follow<'a> for &'a Address {
    type Inner = &'a Address;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        flatbuffers::follow_cast_ref::<Address>(buf, loc)
    }
}
impl<'b> flatbuffers::Push for Address {
    type Output = Address;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Address as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Address {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.in_buffer::<Self>(pos)
    }
}

impl<'a> Address {
    #[allow(clippy::too_many_arguments)]
    pub fn new(value: &[u8; 20]) -> Self {
        let mut s = Self([0; 20]);
        s.set_value(value);
        s
    }

    pub const fn get_fully_qualified_name() -> &'static str {
        "Address"
    }

    pub fn value(&'a self) -> flatbuffers::Array<'a, u8, 20> {
        // Safety:
        // Created from a valid Table for this object
        // Which contains a valid array in this slot
        unsafe { flatbuffers::Array::follow(&self.0, 0) }
    }

    pub fn set_value(&mut self, items: &[u8; 20]) {
        // Safety:
        // Created from a valid Table for this object
        // Which contains a valid array in this slot
        unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
    }
}
