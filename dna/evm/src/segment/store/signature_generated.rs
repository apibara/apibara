// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
pub enum SignatureOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Signature<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Signature<'a> {
    type Inner = Signature<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> Signature<'a> {
    pub const VT_R: flatbuffers::VOffsetT = 4;
    pub const VT_S: flatbuffers::VOffsetT = 6;

    pub const fn get_fully_qualified_name() -> &'static str {
        "Signature"
    }

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Signature { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SignatureArgs<'args>,
    ) -> flatbuffers::WIPOffset<Signature<'bldr>> {
        let mut builder = SignatureBuilder::new(_fbb);
        if let Some(x) = args.s {
            builder.add_s(x);
        }
        if let Some(x) = args.r {
            builder.add_r(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn r(&self) -> Option<&'a U256> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<U256>(Signature::VT_R, None) }
    }
    #[inline]
    pub fn s(&self) -> Option<&'a U256> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<U256>(Signature::VT_S, None) }
    }
}

impl flatbuffers::Verifiable for Signature<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<U256>("r", Self::VT_R, false)?
            .visit_field::<U256>("s", Self::VT_S, false)?
            .finish();
        Ok(())
    }
}
pub struct SignatureArgs<'a> {
    pub r: Option<&'a U256>,
    pub s: Option<&'a U256>,
}
impl<'a> Default for SignatureArgs<'a> {
    #[inline]
    fn default() -> Self {
        SignatureArgs { r: None, s: None }
    }
}

pub struct SignatureBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SignatureBuilder<'a, 'b> {
    #[inline]
    pub fn add_r(&mut self, r: &U256) {
        self.fbb_.push_slot_always::<&U256>(Signature::VT_R, r);
    }
    #[inline]
    pub fn add_s(&mut self, s: &U256) {
        self.fbb_.push_slot_always::<&U256>(Signature::VT_S, s);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SignatureBuilder<'a, 'b> {
        let start = _fbb.start_table();
        SignatureBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Signature<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for Signature<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("Signature");
        ds.field("r", &self.r());
        ds.field("s", &self.s());
        ds.finish()
    }
}
