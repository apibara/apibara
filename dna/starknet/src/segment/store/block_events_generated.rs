// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
pub enum BlockEventsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockEvents<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockEvents<'a> {
    type Inner = BlockEvents<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> BlockEvents<'a> {
    pub const VT_BLOCK_NUMBER: flatbuffers::VOffsetT = 4;
    pub const VT_EVENTS: flatbuffers::VOffsetT = 6;

    pub const fn get_fully_qualified_name() -> &'static str {
        "BlockEvents"
    }

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BlockEvents { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BlockEventsArgs<'args>,
    ) -> flatbuffers::WIPOffset<BlockEvents<'bldr>> {
        let mut builder = BlockEventsBuilder::new(_fbb);
        builder.add_block_number(args.block_number);
        if let Some(x) = args.events {
            builder.add_events(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn block_number(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(BlockEvents::VT_BLOCK_NUMBER, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn events(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event>>,
            >>(BlockEvents::VT_EVENTS, None)
        }
    }
}

impl flatbuffers::Verifiable for BlockEvents<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>("block_number", Self::VT_BLOCK_NUMBER, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Event>>,
            >>("events", Self::VT_EVENTS, false)?
            .finish();
        Ok(())
    }
}
pub struct BlockEventsArgs<'a> {
    pub block_number: u64,
    pub events: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>>,
    >,
}
impl<'a> Default for BlockEventsArgs<'a> {
    #[inline]
    fn default() -> Self {
        BlockEventsArgs {
            block_number: 0,
            events: None,
        }
    }
}

pub struct BlockEventsBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BlockEventsBuilder<'a, 'b> {
    #[inline]
    pub fn add_block_number(&mut self, block_number: u64) {
        self.fbb_
            .push_slot::<u64>(BlockEvents::VT_BLOCK_NUMBER, block_number, 0);
    }
    #[inline]
    pub fn add_events(
        &mut self,
        events: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Event<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(BlockEvents::VT_EVENTS, events);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlockEventsBuilder<'a, 'b> {
        let start = _fbb.start_table();
        BlockEventsBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<BlockEvents<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for BlockEvents<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("BlockEvents");
        ds.field("block_number", &self.block_number());
        ds.field("events", &self.events());
        ds.finish()
    }
}
